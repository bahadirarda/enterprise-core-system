name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.changes.outputs.status }}
      admin: ${{ steps.changes.outputs.admin }}
      auth: ${{ steps.changes.outputs.auth }}
      hrms: ${{ steps.changes.outputs.hrms }}
      portal: ${{ steps.changes.outputs.portal }}
      marketing: ${{ steps.changes.outputs.marketing }}
      packages: ${{ steps.changes.outputs.packages }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            status:
              - 'apps/status/**'
            admin:
              - 'apps/admin/**'
            auth:
              - 'apps/auth/**'
            hrms:
              - 'apps/hrms/**'
            portal:
              - 'apps/portal/**'
            marketing:
              - 'apps/marketing/**'
            packages:
              - 'packages/**'
            tests:
              - 'tests/**'
              - '*.config.js'
              - '*.config.ts'
              - 'playwright.config.js'
              - 'package.json'
              - 'package-lock.json'

  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.status == 'true' || 
      needs.changes.outputs.admin == 'true' || 
      needs.changes.outputs.auth == 'true' || 
      needs.changes.outputs.hrms == 'true' || 
      needs.changes.outputs.portal == 'true' || 
      needs.changes.outputs.marketing == 'true' || 
      needs.changes.outputs.packages == 'true' || 
      needs.changes.outputs.tests == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run check-types

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build all apps
        run: npm run build

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Start all apps
        run: |
          # Kill any existing processes on our ports
          sudo lsof -ti:4000,4001,4002,4003,4004 | xargs -r sudo kill -9 || true
          
          # Export port configuration
          export AUTH_PORT=4000
          export PORTAL_PORT=4001
          export HRMS_PORT=4002
          export ADMIN_PORT=4003
          export STATUS_PORT=4004
          
          # Start apps in background with port configuration
          npm run dev &
          
          # Wait for apps to start and verify they're running
          echo "🔄 Waiting for apps to start..."
          sleep 30
          
          # Check if apps are responding
          for port in 4000 4001 4002 4003 4004; do
            echo "🔍 Checking port $port..."
            timeout 10 bash -c "until curl -s http://localhost:$port > /dev/null; do sleep 1; done" || echo "⚠️ Port $port not responding"
          done

      - name: Run Playwright E2E tests
        run: |
          echo "🧪 Running Playwright tests with maximum parallelism..."
          npx playwright test --workers=100% --reporter=github --project=chromium --project=firefox --max-failures=5
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 100%

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: npm run build
        env:
          NODE_ENV: staging

      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: docker build, push to registry, deploy to kubernetes

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here

  # notify job removed (Slack not used)

  # Slack notification removed (not used)
  # If future chat system needed, add steps here 